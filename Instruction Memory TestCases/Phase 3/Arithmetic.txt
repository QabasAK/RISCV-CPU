module instruction_memory(clk, address, read_data);
  input clk;
  input [31:0] address;
  output reg [31:0] read_data;
  
  reg [7:0] memory [16383:0];
  
  initial 
    begin       
      memory[0]<=8'h9b;
      memory[1]<=8'h00;
      memory[2]<=8'h30;
      memory[3]<=8'h02;
      
      memory[4]<=8'h1b;
      memory[5]<=8'h01;
      memory[6]<=8'hf0;
      memory[7]<=8'h02;
      
      memory[8]<=8'hb3;
      memory[9]<=8'he1;
      memory[10]<=8'h20;
      memory[11]<=8'h00;
      
      memory[12]<=8'h1b;
      memory[13]<=8'h02;
      memory[14]<=8'ha0;
      memory[15]<=8'h01;
      
      memory[16]<=8'h9b;
      memory[17]<=8'h04;
      memory[18]<=8'h10;
      memory[19]<=8'h00;
      
      memory[20]<=8'hb3;
      memory[21]<=8'h22;
      memory[22]<=8'h92;
      memory[23]<=8'h00;
      
      memory[24]<=8'h33;
      memory[25]<=8'h93;
      memory[26]<=8'h51;
      memory[27]<=8'h28;
      
      memory[28]<=8'h9b;
      memory[29]<=8'h03;
      memory[30]<=8'h13;
      memory[31]<=8'h00;
      
      memory[32]<=8'h33;
      memory[33]<=8'h14;
      memory[34]<=8'h70;
      memory[35]<=8'h28;
      
          end
  
  always @ (posedge clk)
    begin 
      read_data<={memory[address+3],memory[address+2],memory[address+1],memory[address]};
    end 


endmodule // instruction_memory
